Donnees importantes à potentiellement récupérer pour le monitoring:

Dans :

#g_game.c
	boolean         paused;
	int             consoleplayer;          // player taking events and displaying 
	int             displayplayer;          // view being displayed 
	
#d_ticmd.h
	// The data sampled per tick (single player)
	// and transmitted to other peers (multiplayer).
	// Mainly movements/button commands per game tick,
	// plus a checksum for internal state consistency.
	typedef struct
	{
		signed char	forwardmove;	// *2048 for move
		signed char	sidemove;	// *2048 for move
		short	angleturn;	// <<16 for angle delta
		byte	chatchar;
		byte	buttons;
		byte    consistancy;	// checks for net game
	} ticcmd_t;
	
#d_player.h
	//
	// Extended player object info: player_t
	//
	typedef struct player_s
	{
		mobj_t*		mo;
		playerstate_t	playerstate;
		ticcmd_t		cmd;

		// Determine POV,
		//  including viewpoint bobbing during movement.
		// Focal origin above r.z
		fixed_t		viewz;
		// Base height above floor for viewz.
		fixed_t		viewheight;
		// Bob/squat speed.
		fixed_t         	deltaviewheight;
		// bounded/scaled total momentum.
		fixed_t         	bob;	

		// This is only used between levels,
		// mo->health is used during levels.
		int			health;	
		int			armorpoints;
		// Armor type is 0-2.
		int			armortype;	

		// Power ups. invinc and invis are tic counters.
		int			powers[NUMPOWERS];
		boolean		cards[NUMCARDS];
		boolean		backpack;
		
		// Frags, kills of other players.
		int			frags[MAXPLAYERS];
		weapontype_t	readyweapon;
		
		// Is wp_nochange if not changing.
		weapontype_t	pendingweapon;

		boolean		weaponowned[NUMWEAPONS];
		int			ammo[NUMAMMO];
		int			maxammo[NUMAMMO];

		// True if button down last tic.
		int			attackdown;
		int			usedown;

		// Bit flags, for cheats and debug.
		// See cheat_t, above.
		int			cheats;		

		// Refired shots are less accurate.
		int			refire;		

		 // For intermission stats.
		int			killcount;
		int			itemcount;
		int			secretcount;

		// Hint messages.
		char*		message;	
		
		// For screen flashing (red or bright).
		int			damagecount;
		int			bonuscount;

		// Who did damage (NULL for floors/ceilings).
		mobj_t*		attacker;
		
		// So gun flashes light up areas.
		int			extralight;

		// Current PLAYPAL, ???
		//  can be set to REDCOLORMAP for pain, etc.
		int			fixedcolormap;

		// Player skin colorshift,
		//  0-3 for which color to draw player.
		int			colormap;	

		// Overlay view sprites (gun, etc).
		pspdef_t		psprites[NUMPSPRITES];

		// True if secret level has been done.
		boolean		didsecret;	

	} player_t;

	//
	// INTERMISSION
	// Structure passed e.g. to WI_Start(wb)
	//
	typedef struct
	{
		boolean	in;	// whether the player is in game
		
		// Player stats, kills, collected items etc.
		int		skills;
		int		sitems;
		int		ssecret;
		int		stime; 
		int		frags[4];
		int		score;	// current score on entry, modified on return
	  
	} wbplayerstruct_t;
	
#doomdef.h
	// The defined weapons,
	//  including a marker indicating
	//  user has not changed weapon.
	typedef enum
	{
		wp_fist,
		wp_pistol,
		wp_shotgun,
		wp_chaingun,
		wp_missile,
		wp_plasma,
		wp_bfg,
		wp_chainsaw,
		wp_supershotgun,

		NUMWEAPONS,
		
		// No pending weapon change.
		wp_nochange

	} weapontype_t;
	
	// Ammunition types defined.
	typedef enum
	{
		am_clip,	// Pistol / chaingun ammo.
		am_shell,	// Shotgun / double barreled shotgun.
		am_cell,	// Plasma rifle, BFG.
		am_misl,	// Missile launcher.
		NUMAMMO,
		am_noammo	// Unlimited for chainsaw / fist.	

	} ammotype_t;
	
#d_event.h {plus généralement voir toutes les variables permettant d'identifier les events dans d_event}

	//
	// Button/action code definitions.
	//
	typedef enum
	{
		// Press "Fire".
		BT_ATTACK		= 1,
		// Use button, to open doors, activate switches.
		BT_USE		= 2,

		// Flag: game events, not really buttons.
		BT_SPECIAL		= 128,
		BT_SPECIALMASK	= 3,
		
		// Flag, weapon change pending.
		// If true, the next 3 bits hold weapon num.
		BT_CHANGE		= 4,
		// The 3bit weapon mask and shift, convenience.
		BT_WEAPONMASK	= (8+16+32),
		BT_WEAPONSHIFT	= 3,

		// Pause the game.
		BTS_PAUSE		= 1,
		// Save the game at each console.
		BTS_SAVEGAME	= 2,

		// Savegame slot numbers
		//  occupy the second byte of buttons.    
		BTS_SAVEMASK	= (4+8+16),
		BTS_SAVESHIFT 	= 2,
	  
	} buttoncode_t;
	
#p_pspr.c

#d_items.h

	// Weapon info: sprite frames, ammunition use.
	typedef struct
	{
		ammotype_t	ammo;
		int		upstate;
		int		downstate;
		int		readystate;
		int		atkstate;
		int		flashstate;

	} weaponinfo_t;

#p_mobj.h

	// Map Object definition.
	typedef struct mobj_s
	{
		// List: thinker links.
		thinker_t		thinker;

		// Info for drawing: position.
		fixed_t		x;
		fixed_t		y;
		fixed_t		z;

		// More list: links in sector (if needed)
		struct mobj_s*	snext;
		struct mobj_s*	sprev;

		//More drawing info: to determine current sprite.
		angle_t		angle;	// orientation
		spritenum_t		sprite;	// used to find patch_t and flip value
		int			frame;	// might be ORed with FF_FULLBRIGHT

		// Interaction info, by BLOCKMAP.
		// Links in blocks (if needed).
		struct mobj_s*	bnext;
		struct mobj_s*	bprev;
		
		struct subsector_s*	subsector;

		// The closest interval over all contacted Sectors.
		fixed_t		floorz;
		fixed_t		ceilingz;

		// For movement checking.
		fixed_t		radius;
		fixed_t		height;	

		// Momentums, used to update position.
		fixed_t		momx;
		fixed_t		momy;
		fixed_t		momz;

		// If == validcount, already checked.
		int			validcount;

		mobjtype_t		type;
		mobjinfo_t*		info;	// &mobjinfo[mobj->type]
		
		int			tics;	// state tic counter
		state_t*		state;
		int			flags;
		int			health;

		// Movement direction, movement generation (zig-zagging).
		int			movedir;	// 0-7
		int			movecount;	// when 0, select a new dir

		// Thing being chased/attacked (or NULL),
		// also the originator for missiles.
		struct mobj_s*	target;

		// Reaction time: if non 0, don't attack yet.
		// Used by player to freeze a bit after teleporting.
		int			reactiontime;   

		// If >0, the target will be chased
		// no matter what (even if shot)
		int			threshold;

		// Additional info record for player avatars only.
		// Only valid if type == MT_PLAYER
		struct player_s*	player;

		// Player number last looked for.
		int			lastlook;	

		// For nightmare respawn.
		mapthing_t		spawnpoint;	

		// Thing being chased/attacked for tracers.
		struct mobj_s*	tracer;	
		
	} mobj_t;
