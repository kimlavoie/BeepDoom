Donnees importantes à potentiellement récupérer pour le monitoring:

Dans :

#g_game.c
	boolean         paused;
	int             consoleplayer;          // player taking events and displaying 
	int             displayplayer;          // view being displayed 
	
#d_ticmd.h
	// The data sampled per tick (single player)
	// and transmitted to other peers (multiplayer).
	// Mainly movements/button commands per game tick,
	// plus a checksum for internal state consistency.
	typedef struct
	{
		signed char	forwardmove;	// *2048 for move
		signed char	sidemove;	// *2048 for move
		short	angleturn;	// <<16 for angle delta
		byte	chatchar;
		byte	buttons;
		byte    consistancy;	// checks for net game
	} ticcmd_t;
	
#d_player.h
	//
	// Extended player object info: player_t
	//
	typedef struct player_s
	{
		mobj_t*		mo;
		playerstate_t	playerstate;
		ticcmd_t		cmd;

		// Determine POV,
		//  including viewpoint bobbing during movement.
		// Focal origin above r.z
		fixed_t		viewz;
		// Base height above floor for viewz.
		fixed_t		viewheight;
		// Bob/squat speed.
		fixed_t         	deltaviewheight;
		// bounded/scaled total momentum.
		fixed_t         	bob;	

		// This is only used between levels,
		// mo->health is used during levels.
		int			health;	
		int			armorpoints;
		// Armor type is 0-2.
		int			armortype;	

		// Power ups. invinc and invis are tic counters.
		int			powers[NUMPOWERS];
		boolean		cards[NUMCARDS];
		boolean		backpack;
		
		// Frags, kills of other players.
		int			frags[MAXPLAYERS];
		weapontype_t	readyweapon;
		
		// Is wp_nochange if not changing.
		weapontype_t	pendingweapon;

		boolean		weaponowned[NUMWEAPONS];
		int			ammo[NUMAMMO];
		int			maxammo[NUMAMMO];

		// True if button down last tic.
		int			attackdown;
		int			usedown;

		// Bit flags, for cheats and debug.
		// See cheat_t, above.
		int			cheats;		

		// Refired shots are less accurate.
		int			refire;		

		 // For intermission stats.
		int			killcount;
		int			itemcount;
		int			secretcount;

		// Hint messages.
		char*		message;	
		
		// For screen flashing (red or bright).
		int			damagecount;
		int			bonuscount;

		// Who did damage (NULL for floors/ceilings).
		mobj_t*		attacker;
		
		// So gun flashes light up areas.
		int			extralight;

		// Current PLAYPAL, ???
		//  can be set to REDCOLORMAP for pain, etc.
		int			fixedcolormap;

		// Player skin colorshift,
		//  0-3 for which color to draw player.
		int			colormap;	

		// Overlay view sprites (gun, etc).
		pspdef_t		psprites[NUMPSPRITES];

		// True if secret level has been done.
		boolean		didsecret;	

	} player_t;

	//
	// INTERMISSION
	// Structure passed e.g. to WI_Start(wb)
	//
	typedef struct
	{
		boolean	in;	// whether the player is in game
		
		// Player stats, kills, collected items etc.
		int		skills;
		int		sitems;
		int		ssecret;
		int		stime; 
		int		frags[4];
		int		score;	// current score on entry, modified on return
	  
	} wbplayerstruct_t;
	
#doomdef.h
	// The defined weapons,
	//  including a marker indicating
	//  user has not changed weapon.
	typedef enum
	{
		wp_fist,
		wp_pistol,
		wp_shotgun,
		wp_chaingun,
		wp_missile,
		wp_plasma,
		wp_bfg,
		wp_chainsaw,
		wp_supershotgun,

		NUMWEAPONS,
		
		// No pending weapon change.
		wp_nochange

	} weapontype_t;