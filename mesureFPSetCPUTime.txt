#include <time.h>

void D_DoomLoop (void)
{
    float tempsDebut, tempsFin, duree, fps;
    char messFps[10],messCPU[20],messA[30];
    clock_t start, end;
    double cpu_time_used;
    if (demorecording)
	G_BeginRecording ();

    TryRunTics();

    I_InitGraphics ();

    R_ExecuteSetViewSize();

    D_StartGameLoop();

    if (testcontrols)
    {
        wipegamestate = gamestate;
    }


    while (1)
    {
    start = clock();
    tempsDebut = SDL_GetTicks();

//
//  D_DoomLoop
//
extern  boolean         demorecording;

void D_DoomLoop (void)
{
    float tempsDebut, tempsFin, duree, fps; //Variables pour mesurer le temps à chaque tour de boucle
    char messFps[10],messCPU[20],messA[30];
    clock_t start, end; //Variables pour récupérer le temps d'utilisation du processeur.
    double cpu_time_used;
    if (demorecording)
	G_BeginRecording ();

    TryRunTics();

    I_InitGraphics ();

    R_ExecuteSetViewSize();

    D_StartGameLoop();

    if (testcontrols)
    {
        wipegamestate = gamestate;
    }


    while (1)
    {
    start = clock(); //On récupère le temps de processeur utilisé actuel au début de la boucle
    tempsDebut = SDL_GetTicks(); //On récupère le temps écoulé depuis l'initialisation de SDL au début de la boucle
	// frame syncronous IO operations
	I_StartFrame ();

	// process one or more tics
	if (singletics)
	{
	    I_StartTic ();
	    D_ProcessEvents ();
	    G_BuildTiccmd (&netcmds[consoleplayer][maketic%BACKUPTICS]);
	    if (advancedemo)
		D_DoAdvanceDemo ();
	    M_Ticker ();
	    G_Ticker ();
	    gametic++;
	    maketic++;
	}
	else
	{
	    TryRunTics (); // will run at least one tic
	}

	S_UpdateSounds (players[consoleplayer].mo);// move positional sounds

	// Update display, next frame, with current state.
        if (screenvisible)
            D_Display ();
    tempsFin = SDL_GetTicks(); //On récupère le temps écoulé depuis l'initialisation de SDL à la fin de la boucle
    duree = (tempsFin - tempsDebut)/1000;
    fps = 1 / duree;// On calcule les fps
    //printf("fps : %f , duree : %f , tempsFin : %f, tempsDebut : %f \n",fps,duree,tempsFin, tempsDebut);
    sprintf(messFps,"FPS : %f",fps);
    end = clock(); //On récupère le temps de processeur utilisé actuel à la fin de la boucle
    cpu_time_used = ((double) (end - start)) / CLOCKS_PER_SEC; //On calcule le temps de processeur utilisé pendant un tour de boucle par seconde.
    sprintf(messCPU, "CPU time : %f",cpu_time_used);
    messA[0] = '\0';
    strcat(messA,messFps);
    strcat(messA," ");
    strcat(messA,messCPU);
    players[consoleplayer].message = messA ; //TEST : On affiche le FPS et le CPU time sur l'interface du joueur en haut à gauche.
    }
}